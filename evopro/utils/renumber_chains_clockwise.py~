from Bio import PDB
import os, sys
import numpy as np
import pyrosetta
import math
import dataclasses
import io
from typing import Any, Mapping, Optional, Dict
from Bio.PDB import PDBParser

sys.path.append("/proj/kuhl_lab/evopro/")
from evopro.utils.pdb_parser import get_coordinates_pdb

FeatureDict = Mapping[str, np.ndarray]
ModelOutput = Mapping[str, Any]  # Is a nested dict.

# Complete sequence of chain IDs supported by the PDB format.
PDB_CHAIN_IDS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
PDB_MAX_CHAINS = len(PDB_CHAIN_IDS)  # := 62.

restypes = ["A", "R", "N", "D", "C", "Q", "E", "G", "H", "I", "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V"]
restypes_with_x = restypes + ["X"]
restype_order = {restype: i for i, restype in enumerate(restypes)}
restype_num = len(restypes)  # := 20.
restype_1to3 = {"A": "ALA", "R": "ARG", "N": "ASN", "D": "ASP", "C": "CYS", "Q": "GLN", "E": "GLU", "G": "GLY",
                "H": "HIS", "I": "ILE", "L": "LEU", "K": "LYS", "M": "MET", "F": "PHE", "P": "PRO", "S": "SER",
                "T": "THR", "W": "TRP", "Y": "TYR", "V": "VAL"}
restype_3to1 = {v: k for k, v in restype_1to3.items()}
restype_name_to_atom14_names = {
    "ALA": ["N", "CA", "C", "O", "CB", "", "", "", "", "", "", "", "", ""],
    "ARG": ["N", "CA", "C", "O", "CB", "CG", "CD", "NE", "CZ", "NH1", "NH2", "", "", ""],
    "ASN": ["N", "CA", "C", "O", "CB", "CG", "OD1", "ND2", "", "", "", "", "", ""],
    "ASP": ["N", "CA", "C", "O", "CB", "CG", "OD1", "OD2", "", "", "", "", "", ""],
    "CYS": ["N", "CA", "C", "O", "CB", "SG", "", "", "", "", "", "", "", ""],
    "GLN": ["N", "CA", "C", "O", "CB", "CG", "CD", "OE1", "NE2", "", "", "", "", ""],
    "GLU": ["N", "CA", "C", "O", "CB", "CG", "CD", "OE1", "OE2", "", "", "", "", ""],
    "GLY": ["N", "CA", "C", "O", "", "", "", "", "", "", "", "", "", ""],
    "HIS": ["N", "CA", "C", "O", "CB", "CG", "ND1", "CD2", "CE1", "NE2", "", "", "", ""],
    "ILE": ["N", "CA", "C", "O", "CB", "CG1", "CG2", "CD1", "", "", "", "", "", ""],
    "LEU": ["N", "CA", "C", "O", "CB", "CG", "CD1", "CD2", "", "", "", "", "", ""],
    "LYS": ["N", "CA", "C", "O", "CB", "CG", "CD", "CE", "NZ", "", "", "", "", ""],
    "MET": ["N", "CA", "C", "O", "CB", "CG", "SD", "CE", "", "", "", "", "", ""],
    "PHE": ["N", "CA", "C", "O", "CB", "CG", "CD1", "CD2", "CE1", "CE2", "CZ", "", "", ""],
    "PRO": ["N", "CA", "C", "O", "CB", "CG", "CD", "", "", "", "", "", "", ""],
    "SER": ["N", "CA", "C", "O", "CB", "OG", "", "", "", "", "", "", "", ""],
    "THR": ["N", "CA", "C", "O", "CB", "OG1", "CG2", "", "", "", "", "", "", ""],
    "TRP": ["N", "CA", "C", "O", "CB", "CG", "CD1", "CD2", "NE1", "CE2", "CE3", "CZ2", "CZ3", "CH2"],
    "TYR": ["N", "CA", "C", "O", "CB", "CG", "CD1", "CD2", "CE1", "CE2", "CZ", "OH", "", ""],
    "VAL": ["N", "CA", "C", "O", "CB", "CG1", "CG2", "", "", "", "", "", "", ""],
    "UNK": ["", "", "", "", "", "", "", "", "", "", "", "", "", ""],
}


@dataclasses.dataclass(frozen=False)
class Protein:
    """Protein structure representation."""

    # Cartesian coordinates of atoms in angstroms. The atom types correspond to
    # residue_constants.atom_types, i.e. the first three are N, CA, CB.
    atom_positions: np.ndarray  # [num_res, num_atom_type, 3]

    # Amino-acid type for each residue represented as an integer between 0 and
    # 20, where 20 is 'X'.
    aatype: np.ndarray  # [num_res]

    # Binary float mask to indicate presence of a particular atom. 1.0 if an atom
    # is present and 0.0 if not. This should be used for loss masking.
    atom_mask: np.ndarray  # [num_res, num_atom_type]

    # Residue index as used in PDB. It is not necessarily continuous or 0-indexed.
    residue_index: np.ndarray  # [num_res]

    # 0-indexed number corresponding to the chain in the protein that this residue
    # belongs to.
    chain_index: np.ndarray  # [num_res]

    # B-factors, or temperature factors, of each residue (in sq. angstroms units),
    # representing the displacement of the residue from its ground truth mean
    # value.
    b_factors: np.ndarray  # [num_res, num_atom_type]
    
    # Mapping connecting chain ID to integer based chain index.
    chain_id_mapping: Dict[str, int]

    def __post_init__(self):
        if len(np.unique(self.chain_index)) > PDB_MAX_CHAINS:
            raise ValueError(
                f'Cannot build an instance with more than {PDB_MAX_CHAINS} chains '
                'because these cannot be written to PDB format.'
            )


def calculate_chain_angle(chain, centroid):
    angles = np.arctan2([atom.coord[1] - centroid[1] for atom in chain.get_atoms()],
                       [atom.coord[0] - centroid[0] for atom in chain.get_atoms()])
    return np.mean(angles)

def renumber_chains(pdb_file, output_filename, clockwise=True, start_char='A'):
    # Load the PDB structure
    parser = PDB.PDBParser(QUIET=True)
    structure = parser.get_structure('protein', pdb_file)

    # Get the coordinates of the atoms to calculate the centroid
    coords = []
    for model in structure:
        for chain in model:
            for atom in chain.get_atoms():
                coords.append(atom.coord)

    coords = np.array(coords)
    centroid = np.mean(coords, axis=0)

    # Sort chains based on the average angle of all atoms in each chain
    chains = list(structure.get_chains())
    chains.sort(key=lambda chain: calculate_chain_angle(chain, centroid))

    if not clockwise:
        chains.reverse()

    # Renumber chains as numbers starting from 1
    for i, chain in enumerate(chains):
        chain.id = str(i + 1)

    # Determine the starting character for chain identifiers
    current_char = ord(start_char)
    # Renumber and rename chains as letters starting with A
    for chain in chains:
        chain.id = chr(current_char)
        current_char += 1

    # Save the modified structure
    io = PDB.PDBIO()
    io.set_structure(structure)
    io.save(output_filename)

    print(f'Renumbered and renamed chains and saved the result to {output_filename}')

def get_sym_vec(pose, order=3, chains=[]):
    # Get all chains if not provided.
    if chains == [] or chains == ['']:
        chains = [pose.pdb_info().chain(pose.chain_end(i)) for i in range(1, pose.num_chains() + 1)]
    
    res1 = [pose.pdb_info().pdb2pose(chains[i], 10) for i in range(order)]
    res2 = [pose.pdb_info().pdb2pose(chains[i], 20) for i in range(order)]

    atom1 = [pose.residue(res).xyz("CA") for res in res1]
    atom2 = [pose.residue(res).xyz("CA") for res in res2]

    center1 = pyrosetta.rosetta.numeric.xyzVector_double_t(
        sum([atom.x for atom in atom1]) / order,
        sum([atom.y for atom in atom1]) / order,
        sum([atom.z for atom in atom1]) / order
    )
    center2 = pyrosetta.rosetta.numeric.xyzVector_double_t(
        sum([atom.x for atom in atom2]) / order,
        sum([atom.y for atom in atom2]) / order,
        sum([atom.z for atom in atom2]) / order
    )

    sym_vec = pyrosetta.rosetta.numeric.xyzVector_double_t(
        center2.x - center1.x,
        center2.y - center1.y,
        center2.z - center1.z
    )

    return sym_vec


def get_rot_mat(sym_vec, axis='z', invert=False):
    norm_sym_vec = sym_vec.normalize()
    axis_vec = pyrosetta.rosetta.numeric.xyzVector_double_t(0, 0, 0)
    setattr(axis_vec, axis, 1.)
    
    if invert:
        axis_vec *= -1

    rotation_axis = norm_sym_vec.cross(axis_vec)
    rotation_ang = math.acos(norm_sym_vec.dot(axis_vec))

    return pyrosetta.rosetta.numeric.rotation_matrix(rotation_axis, rotation_ang)


def do_rotation(pose, rot_mat):
    xform = np.eye(4)
    xform[:3, :3] = np.array(rot_mat)

    pose.apply_transform(xform)

    return pose


def zalign(input_pdb, order, axis='z', invert=False, sym_chains=[]):
    # Reformat sym_chains

    pyrosetta.init()
    pose = pyrosetta.pose_from_pdb(input_pdb)

    sym_vec = get_sym_vec(pose, order, chains=sym_chains)

    rot_mat = get_rot_mat(sym_vec, axis, invert=invert)

    rotated_pose = do_rotation(pose, rot_mat)

    return rotated_pose


def calculate_z_range(pose):
    z_values = [pose.residue(i).xyz("CA").z for i in range(1, pose.total_residue() + 1)]
    return min(z_values), max(z_values)



def from_pdb_string(pdb_str: str, model_idx: int = 0, chain_id: Optional[str] = None, discard_water: bool = True, mse_to_met: bool = False, ignore_non_std: bool = True) -> Protein:
    """Takes a PDB string and constructs a Protein object.

    WARNING: All non-standard residue types will be converted into UNK. All
        non-standard atoms will be ignored.

    Args:
        pdb_str: The contents of the pdb file
        model_idx: The specific model in the PDB file that will be
            parsed. This is 0-indexed. Default is 0.
        chain_id: If chain_id is specified (e.g. A), then only that chain
            is parsed. Otherwise all chains are parsed.
        discard_water: Boolean specifying whether to ignore water molecules.
            Default is True.
        mse_to_met: Boolean specifying whether to convert MSE residues to MET residues.
            Default is False.
        ignore_non_std: Boolean specifying whether to ignore nonstandard residue types.
            If False, then they will be converted to UNK. Default is True.

    Returns:
        A new `Protein` parsed from the pdb contents.
    """
    pdb_fh = io.StringIO(pdb_str)
    parser = PDBParser(QUIET=True)
    structure = parser.get_structure('none', pdb_fh)
    models = list(structure.get_models())
    if model_idx is not None and model_idx > len(models) - 1:
        raise ValueError(
            f'Requested model index is out of range. Found {len(models)} models.'
        )
    elif model_idx is not None:
        model = models[model_idx]
    else:
        model = models[0]

    atom_positions = []
    aatype = []
    atom_mask = []
    residue_index = []
    chain_ids = []
    b_factors = []
    insertion_code_offset = 0
    for chain in sorted(model, key=lambda x: x.id):
        if chain_id is not None and chain.id != chain_id:
            continue
        for res in sorted(chain, key=lambda x: x.id[1]):
            # Discard water residues.     
            if discard_water:
                if res.resname == 'HOH':
                    continue
            
            # Convert MSE residues to MET by changing only necessary fields.
            if mse_to_met:
                if res.resname == 'MSE':
                    res.resname = 'MET'
                    for atom in res:
                        if atom.name == 'SE':
                            atom.name = 'SD'
                                    
            # Ignore non-standard residues
            res_shortname = restype_3to1.get(res.resname, 'X')
            if ignore_non_std:
                if res_shortname == 'X':
                    continue
            
            # Increment residue index offset if insertion code is detected.
            if res.id[2] != ' ':
                insertion_code_offset += 1
            
            restype_idx = restype_order.get(
                res_shortname, restype_num)
            pos = np.full((14, 3), fill_value=(np.nan))
            mask = np.zeros((14,))
            res_b_factors = np.zeros((14,))
            for atom in res:
                if atom.name not in restype_name_to_atom14_names[res.resname]:
                    continue
                pos[restype_name_to_atom14_names[res.resname].index(atom.name)] = atom.coord
                mask[restype_name_to_atom14_names[res.resname].index(atom.name)] = 1.
                res_b_factors[restype_name_to_atom14_names[res.resname].index(atom.name)] = atom.bfactor
            if np.sum(mask) < 0.5:
                # If no known atom positions are reported for the residue then skip it.
                continue
            
            # Update protein-level lists
            aatype.append(restype_idx)
            atom_positions.append(pos)
            atom_mask.append(mask)
            residue_index.append(res.id[1] + insertion_code_offset)
            chain_ids.append(chain.id)
            b_factors.append(res_b_factors)

    # Chain IDs are usually characters so map these to ints.
    unique_chain_ids = np.unique(chain_ids)
    chain_id_mapping = {cid: n for n, cid in enumerate(unique_chain_ids)}
    chain_index = np.array([chain_id_mapping[cid] for cid in chain_ids])

    return Protein(
            atom_positions=np.array(atom_positions),
            atom_mask=np.array(atom_mask),
            aatype=np.array(aatype),
            residue_index=np.array(residue_index),
            chain_index=chain_index,
            b_factors=np.array(b_factors),
            chain_id_mapping=chain_id_mapping
    )


def from_pdb_file(pdb_file: str, **kwargs) -> Protein:
    # Obtain PDB string from PDB file.
    with open(pdb_file, 'r') as f:
        pdb_str = f.read()
        
    # Parse the string and get Protein.
    return from_pdb_string(pdb_str, **kwargs)


def _chain_end(atom_index, end_resname, chain_name, residue_index) -> str:
    chain_end = 'TER'
    return (f'{chain_end:<6}{atom_index:>5}      {end_resname:>3} '
        f'{chain_name:>1}{residue_index:>4}')


def to_pdb(prot: Protein) -> str:
    """Converts a `Protein` instance to a PDB string.

    Args:
        prot: The protein to convert to PDB.

    Returns:
        PDB string.
    """
    res_1to3 = lambda r: restype_1to3.get(restypes_with_x[r], 'UNK')

    pdb_lines = []

    atom_mask = prot.atom_mask
    aatype = prot.aatype
    atom_positions = prot.atom_positions
    residue_index = prot.residue_index.astype(np.int32)
    chain_index = prot.chain_index.astype(np.int32)
    b_factors = prot.b_factors

    if np.any(aatype > restype_num):
        raise ValueError('Invalid aatypes.')

    # Construct a mapping from chain integer indices to chain ID strings.
    chain_ids = {}
    for i in np.unique(chain_index):  # np.unique gives sorted output.
        if i >= PDB_MAX_CHAINS:
            raise ValueError(
                f'The PDB format supports at most {PDB_MAX_CHAINS} chains.')
        chain_ids[i] = PDB_CHAIN_IDS[i]

    pdb_lines.append('MODEL     1')
    atom_index = 1
    last_chain_index = chain_index[0]
    # Add all atom sites.
    for i in range(aatype.shape[0]):
        # Close the previous chain if in a multichain PDB.
        if last_chain_index != chain_index[i]:
            pdb_lines.append(_chain_end(
                atom_index, res_1to3(aatype[i - 1]), chain_ids[chain_index[i - 1]],
                residue_index[i - 1]))
            last_chain_index = chain_index[i]
            atom_index += 1  # Atom index increases at the TER symbol.

        res_name_3 = res_1to3(aatype[i])
        for atom_name, pos, mask, b_factor in zip(
                restype_name_to_atom14_names[res_name_3], atom_positions[i], atom_mask[i], b_factors[i]):
            if mask < 0.5:
                continue

            record_type = 'ATOM'
            name = atom_name if len(atom_name) == 4 else f' {atom_name}'
            alt_loc = ''
            insertion_code = ''
            occupancy = 1.00
            element = atom_name[0]  # Protein supports only C, N, O, S, this works.
            charge = ''

            # PDB is a columnar format, every space matters here!
            atom_line = (f'{record_type:<6}{atom_index:>5} {name:<4}{alt_loc:>1}'
                         f'{res_name_3:>3} {chain_ids[chain_index[i]]:>1}'
                         f'{residue_index[i]:>4}{insertion_code:>1}   '
                         f'{pos[0]:>8.3f}{pos[1]:>8.3f}{pos[2]:>8.3f}'
                         f'{occupancy:>6.2f}{b_factor:>6.2f}          '
                         f'{element:>2}{charge:>2}')
            pdb_lines.append(atom_line)
            atom_index += 1

    # Close the final chain.
    pdb_lines.append(_chain_end(atom_index, res_1to3(aatype[-1]),
                                chain_ids[chain_index[-1]], residue_index[-1]))
    pdb_lines.append('ENDMDL')
    pdb_lines.append('END')

    # Pad all lines to 80 characters.
    pdb_lines = [line.ljust(80) for line in pdb_lines]
    return '\n'.join(pdb_lines) + '\n'  # Add terminating newline.


def renumber_pdb(pdb_path):

    if os.path.isfile(pdb_path):
    
        protein = from_pdb_file(pdb_path)

        n_chains = max(protein.chain_index)
        for i in range(n_chains + 1):
            n_res = np.sum(protein.chain_index == i)
            protein.residue_index[protein.chain_index == i] = np.arange(1, n_res + 1)

        pdb_str = to_pdb(protein)
        return pdb_str

def main(pdb_string):
    
    if os.path.exists("temp.pdb"):
        os.remove("temp.pdb")
    
    with open("temp.pdb", "w") as f:
        f.write(pdb_string)
        
    chains, residues, resindices = get_coordinates_pdb(pdb_string)
    print(chains)
    order = len(chains)
    
    #align to z axis
    pose = zalign("temp.pdb", order, axis="z", invert=False, sym_chains=chains)
    
    #check if correct orientation
    min_z, max_z = calculate_z_range(pose)
    mid_z = (max_z + min_z) / 2
    
    #find z value of residue 1
    res1_z = pose.residue(1).xyz("CA").z
    if res1_z > mid_z:
        #flip
        pose = zalign("temp.pdb", order, axis="z", invert=True, sym_chains=chains)
        
    pose.dump_pdb("temp_pyrosetta.pdb")
    
    #orient chains clockwise
    renumber_chains("temp_pyrosetta.pdb", "temp_clockwise.pdb", False, "A")   

    #renumber before returning
    return renumber_pdb("temp_clockwise.pdb")
    
if __name__ == "__main__":
    path = "/work/users/a/m/amritan/dv_evopro/test_rmsd_calc/"
    pdb1 = path + "design.pdb"
    with open(pdb1, "r") as f:
        pdb1_string = f.read()
    
    print(main(pdb1_string))